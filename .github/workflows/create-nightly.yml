name: Create Nightly

on:
  schedule:
    - cron: '10 10 * * *'
  workflow_dispatch:
#  push:
#    branches: [ Development ]

jobs:
  create-7z:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: Development
          fetch-depth: 0

      - name: Install 7zip
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full

      - name: Get version and date
        id: get_version
        run: |
          if [ ! -f "spruce/spruce" ]; then
            echo "Error: spruce/spruce file not found"
            exit 1
          fi
          VERSION="$(< spruce/spruce)"
          echo "version=${VERSION}-$(date '+%Y%m%d')" >> "$GITHUB_OUTPUT"
          # Get last commit hash and commits, save to file
          {
            echo "Last commit: $(git rev-parse HEAD)"
            echo ""
            echo "Changes in last 24 hours:"
            git log --since="24 hours ago" --pretty=format:'- %s (%an)'
          } > commits_nightly.txt

      - name: Check for commits
        id: check_commits
        run: |
          # Get all commits from last 24 hours
          COMMITS=$(git log --since="24 hours ago" --pretty=format:'- %s (%an)%n')
          if [ -z "$COMMITS" ]; then
            echo "No commits in the last 24 hours"
            exit 1
          fi
          # Write commits to output
          {
            echo "commits<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Update version in language files
        run: |
          # Get the version-date string
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Find and update all .lang files
          find miyoo/res/lang -name "*.lang" -type f -exec sh -c '
            for file do
              # Create temp file
              tmp=$(mktemp)
              # Replace version string, preserving the v prefix
              sed "s/v[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*/v$1/" "$file" > "$tmp"
              mv "$tmp" "$file"
            done
          ' sh "$VERSION" {} +

      - name: Create 7z archive
        run: |
          7z a -t7z -mx=9 "spruceV${{ steps.get_version.outputs.version }}.7z" * .tmp_update \
            -xr!.git \
            -xr!.github \
            -x!.gitignore \
            -x!.gitattributes \
            -x!create_spruce_release.bat \
            -x!create_spruce_release.sh \
            -x!commits_nightly.txt
          # Add the commits file separately to place it at the root
          7z u "spruceV${{ steps.get_version.outputs.version }}.7z" commits_nightly.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: success() && steps.check_commits.outcome == 'success'
        with:
          files: spruceV${{ steps.get_version.outputs.version }}.7z
          tag_name: v${{ steps.get_version.outputs.version }}
          body: ${{ steps.check_commits.outputs.commits }}
          repository: spruceUI/spruceOSNightlies
          token: ${{ secrets.PAT_TOKEN }}
          draft: false
          prerelease: false

      - name: Update OTA file
        if: success() && steps.check_commits.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Clone the OTA repository
          git clone https://github.com/spruceUI/spruceui.github.io.git ota_repo
          
          # Calculate file info
          CHECKSUM=$(md5sum "spruceV${{ steps.get_version.outputs.version }}.7z" | cut -d' ' -f1)
          SIZE_MB=$(ls -l --block-size=1M "spruceV${{ steps.get_version.outputs.version }}.7z" | awk '{print $5}')
          
          # Read existing file content
          CONTENT=$(cat ota_repo/OTA/spruce)
          
          # Update nightly information while preserving other content
          echo "$CONTENT" | grep -v "^NIGHTLY_" > ota_repo/OTA/spruce
          echo "NIGHTLY_VERSION=${{ steps.get_version.outputs.version }}" >> ota_repo/OTA/spruce
          echo "NIGHTLY_CHECKSUM=$CHECKSUM" >> ota_repo/OTA/spruce
          echo "NIGHTLY_SIZE_IN_MB=$SIZE_MB" >> ota_repo/OTA/spruce
          echo "NIGHTLY_LINK=https://github.com/spruceUI/spruceOSNightlies/releases/download/v${{ steps.get_version.outputs.version }}/spruceV${{ steps.get_version.outputs.version }}.7z" >> ota_repo/OTA/spruce
          echo "NIGHTLY_INFO=https://github.com/spruceUI/spruceOSNightlies/releases/tag/v${{ steps.get_version.outputs.version }}" >> ota_repo/OTA/spruce
          
          # Configure git
          cd ota_repo
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Commit and push changes
          git add OTA/spruce
          git commit -m "Update nightly release to ${{ steps.get_version.outputs.version }}"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/spruceUI/spruceui.github.io.git main

      - name: Delete old releases
        if: success() && steps.check_commits.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Get all releases sorted by created date (newest first)
          RELEASES=$(gh api repos/spruceUI/spruceOSNightlies/releases --paginate | jq -r '.[].id')
          
          # Convert to array and keep only releases after the first 3
          COUNT=0
          for RELEASE_ID in $RELEASES; do
            COUNT=$((COUNT + 1))
            if [ $COUNT -gt 3 ]; then
              gh api repos/spruceUI/spruceOSNightlies/releases/$RELEASE_ID -X DELETE
            fi
          done